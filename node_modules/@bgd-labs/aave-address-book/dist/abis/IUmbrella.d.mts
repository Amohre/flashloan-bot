declare const IUmbrella_ABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "COVERAGE_MANAGER_ROLE";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "DEFAULT_ADMIN_ROLE";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "PAUSE_GUARDIAN_ROLE";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "POOL";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IPool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "POOL_ADDRESSES_PROVIDER";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IPoolAddressesProvider";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "RESCUE_GUARDIAN_ROLE";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "SLASHED_FUNDS_RECIPIENT";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "SUPER_ADMIN";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "TRANSPARENT_PROXY_FACTORY";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract ITransparentProxyFactory";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "UMBRELLA_STAKE_TOKEN_IMPL";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "coverDeficitOffset";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "coverPendingDeficit";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "coverReserveDeficit";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "createStakeTokens";
    readonly inputs: readonly [{
        readonly name: "stakeSetups";
        readonly type: "tuple[]";
        readonly internalType: "struct IUmbrellaStkManager.StakeTokenSetup[]";
        readonly components: readonly [{
            readonly name: "underlying";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "cooldown";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "unstakeWindow";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "suffix";
            readonly type: "string";
            readonly internalType: "string";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "emergencyEtherTransfer";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "emergencyEtherTransferStk";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "to";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "emergencyTokenTransfer";
    readonly inputs: readonly [{
        readonly name: "erc20Token";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "to";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "emergencyTokenTransferStk";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "erc20Token";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "to";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getDeficitOffset";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getPendingDeficit";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getReserveSlashingConfig";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct IUmbrellaConfiguration.SlashingConfig";
        readonly components: readonly [{
            readonly name: "umbrellaStake";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "umbrellaStakeUnderlyingOracle";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "liquidationFee";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getReserveSlashingConfigs";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple[]";
        readonly internalType: "struct IUmbrellaConfiguration.SlashingConfig[]";
        readonly components: readonly [{
            readonly name: "umbrellaStake";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "umbrellaStakeUnderlyingOracle";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "liquidationFee";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getRoleAdmin";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getStakeTokenData";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct IUmbrellaConfiguration.StakeTokenData";
        readonly components: readonly [{
            readonly name: "underlyingOracle";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "reserve";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getStkTokens";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "grantRole";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "hasRole";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "initialize";
    readonly inputs: readonly [{
        readonly name: "pool";
        readonly type: "address";
        readonly internalType: "contract IPool";
    }, {
        readonly name: "governance";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "slashedFundsRecipient";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "umbrellaStakeTokenImpl";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "transparentProxyFactory";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "isReserveSlashable";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isUmbrellaStkToken";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "latestUnderlyingAnswer";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "int256";
        readonly internalType: "int256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "maxRescue";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pauseStk";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "predictStakeTokensAddresses";
    readonly inputs: readonly [{
        readonly name: "stakeSetups";
        readonly type: "tuple[]";
        readonly internalType: "struct IUmbrellaStkManager.StakeTokenSetup[]";
        readonly components: readonly [{
            readonly name: "underlying";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "cooldown";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "unstakeWindow";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "suffix";
            readonly type: "string";
            readonly internalType: "string";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "removeSlashingConfigs";
    readonly inputs: readonly [{
        readonly name: "removalPairs";
        readonly type: "tuple[]";
        readonly internalType: "struct IUmbrellaConfiguration.SlashingConfigRemoval[]";
        readonly components: readonly [{
            readonly name: "reserve";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "umbrellaStake";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "renounceRole";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "callerConfirmation";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "revokeRole";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setCooldownStk";
    readonly inputs: readonly [{
        readonly name: "cooldownConfigs";
        readonly type: "tuple[]";
        readonly internalType: "struct IUmbrellaStkManager.CooldownConfig[]";
        readonly components: readonly [{
            readonly name: "umbrellaStake";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "newCooldown";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setDeficitOffset";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "newDeficitOffset";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setUnstakeWindowStk";
    readonly inputs: readonly [{
        readonly name: "unstakeWindowConfigs";
        readonly type: "tuple[]";
        readonly internalType: "struct IUmbrellaStkManager.UnstakeWindowConfig[]";
        readonly components: readonly [{
            readonly name: "umbrellaStake";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "newUnstakeWindow";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "slash";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "supportsInterface";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "tokenForDeficitCoverage";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "unpauseStk";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "updateSlashingConfigs";
    readonly inputs: readonly [{
        readonly name: "slashingConfigs";
        readonly type: "tuple[]";
        readonly internalType: "struct IUmbrellaConfiguration.SlashingConfigUpdate[]";
        readonly components: readonly [{
            readonly name: "reserve";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "umbrellaStake";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "liquidationFee";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "umbrellaStakeUnderlyingOracle";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly name: "DeficitOffsetChanged";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "newDeficitOffset";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "DeficitOffsetCovered";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ERC20Rescued";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "token";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "to";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "Initialized";
    readonly inputs: readonly [{
        readonly name: "version";
        readonly type: "uint64";
        readonly indexed: false;
        readonly internalType: "uint64";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "NativeTokensRescued";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "to";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "PendingDeficitChanged";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "newPendingDeficit";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "PendingDeficitCovered";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ReserveDeficitCovered";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "RoleAdminChanged";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "previousAdminRole";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "newAdminRole";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "RoleGranted";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "sender";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "RoleRevoked";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "sender";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "SlashingConfigurationChanged";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "liquidationFee";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }, {
        readonly name: "umbrellaStakeUnderlyingOracle";
        readonly type: "address";
        readonly indexed: false;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "SlashingConfigurationRemoved";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "StakeTokenSlashed";
    readonly inputs: readonly [{
        readonly name: "reserve";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }, {
        readonly name: "fee";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "UmbrellaStakeTokenCreated";
    readonly inputs: readonly [{
        readonly name: "umbrellaStake";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "underlying";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "name";
        readonly type: "string";
        readonly indexed: false;
        readonly internalType: "string";
    }, {
        readonly name: "symbol";
        readonly type: "string";
        readonly indexed: false;
        readonly internalType: "string";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "AccessControlBadConfirmation";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "AccessControlUnauthorizedAccount";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "neededRole";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "CannotSlash";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ConfigurationHasNotBeenSet";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ConfigurationNotExist";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "EthTransferFailed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidInitialization";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidLiquidationFee";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidNumberOfDecimals";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidOraclePrice";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidReserve";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidStakeToken";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "NotImplemented";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "NotInitializing";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "OnlyRescueGuardian";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ReserveCoverageNotSetup";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ReserveIsConfigured";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SafeERC20FailedOperation";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "TooMuchDeficitOffsetReduction";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "UmbrellaStakeAlreadySetForAnotherReserve";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ZeroAddress";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ZeroDeficitToCover";
    readonly inputs: readonly [];
}];

export { IUmbrella_ABI };
